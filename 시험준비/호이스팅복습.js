/* 

[개념복습]

var 의 문제점

- 호이스팅이 일어난다.
 = 실행 전에 오류를 내면 예측 할 수 있어서 수정이 용이.
 = 호이스팅은 실제 실행 될 때 오류를 발행시킬 수 있어 수정하기 어려움. 
- 재선언이 가능하다.
- 다른 곳에서 사용중인 변수의 값을 의도치 않게 변경할 수 있음. (큰일)
- 함수 레벨 스코프 (유효 범위)에만 지원한다.
- 블록 레벨 스코프는 지원하지 않는다. 

호이스팅 (Hosting)

- 끌어올리다라는 뜻. 변수, 함수, 클래스 선언부를 위로 끌어 올리는 것처럼 동작.
- 선언부만 끌어 올린다. 
- undefined 로 초기화.

스코프 체이닝 : es6 자바스크립트 최신 문법 ecma script

전역 스코프 
- 가장 바깥 유효 범위.
- 어디에서든 접근 가능. 
- 가장 상위 스코프. 

지역 스코프
- 코드 블록 내의 범위. 해당 블록에서만 유호
- 하위 스코프에서 상위 스코프를 참조하는 것은 가능. 단, 반대의 경우에는 불가능.
- 상위 스코프와 하위 스코프의 식별자 이름이 중복되면 하위에서 찾고, 없으면 상위로 넘어감. 
*/

/*
console.log(num);
console.log(num02);
var num = 10;
var num = 1000;

console.log(price);
let prince = 1000;

-변수 선언 이전에 참조 하면 오류를 발생함.
-let 키워드를 사용하면 재선언이 불가능하다 -> 이미 선언된 식별자라면 오류를 발생시킴.

*/

const TAX_RATIO = 10;
// const(상수) : 변하지 않는 수 -> 재할당을 하면 오류가 발생. 즉, 변하지 않은 값을 할당.
//              상수 선언 시, 값을 초기화하지 않으면 오류가 발생.

let i = 100;
for (let i = 0; i < 10; i++) {
  console.log(i);
}

function sum() {
  var i = 0;
}

// var 는 함수 레벨 스코프를 지원한다.

for (var abc = 0; abc < 70; abc++) {}
console.log(abc);

// for 문 안에서 쓴 것: 전역에다가 쓴 것과 동일한 효과.

if (true) {
  let abc = 1000;
  console.log(abc);
}

// let 을 쓰면 별개가 된다. 밖에서 선언한 것을 안으로 하는 것은 가능. 반대는 안됨.

let value = 777;
console.log(value);

// value 는 바깥에서 선언됬기 때문에 코드 블록 안에서도 접근이 가능.

let str = "jeehee";
{
  console.log(str);
  let arr = [1, 23, 4];
  console.log(arr); // 출력됨.
}
//console.log(arr); 출력되지 않음.
// 안에서 밖은 가능한데 밖에서 안은 가능하지 않음.
// 지역 스-코-푸 :하위 스코프에서 상위 스코프 참조 !
// 전역 스-코-푸 : 가장 바깥 유효. 어디서든. 가장 상위 스코프.
