* {
  font-size: 24px;
}

/* 태그 선택자 */
li {
  font-size: 16px;
}

h3 {
  color: blue;
}

/* 클래스 선택자 */
.red {
  color: red;
}

.bold {
  font-weight: bold;
}

/* 아이디 선택자 */
#big {
  font-size: 36px;
}

/* 일치 선택자 */
h3.green {
  color: green;
}

.list {
  padding: 0;
  border: 1px solid black;

  /* 
  <여백>
  padding: 안쪽 여백, 너비에 영향 o
  margin: 바깥 여백, 너비에 영향 x 
  border: 요소의 테두리 선, 너비에 영향 
   -두께: 테두리 선의 두께 지정
   -선의 종류: solid) 실선 
  v 2_box.css 다시 공부하기
  */
}

/* 자식 선택자: .list 라는 클래스를 가진 요소의 바로 밑의 li 태그만 선택 */
.list > li {
  /* border: 1px solid black; */
}

.list > li + li {
  border-top: 1px solid black;
}

/* (Q) .list > li {border : ;} 과 .list >li +li {border-top} 의 굵기 차이  (후자가 더 연함)*/
/* border-top: 테두리상단일괄속성  */

/*  후손 선택자: 후손 요소를 선택 */
.list li {
  list-style: none;
  /* list-style-type 목록 앞의 마커를 정하는 속성*/
}

/*  인접 형제 선택자 : 요소의 바로 다음에 요소 하나만 선택 
    .target + p { }   --> .target 요소의 바로 다음의 p태그 하나만 글씨 크기 변경
*/

.list .target + li {
  color: green;
}
/*
 .target -> <li class="target"> + : 바로 다음에 오는 인접한 형제 요소에 적용한다. <li>
  => <li>~ : 이후의 모든 형제 요소에 적용한다. </li>  이 부분의 글자가 초록색.
*/

/*
일반 형제 선택자 : 같은 부모 내에 있는 형제 요소 모두 선택 
.target ~p {} --> .target 요소의 다음에 오는 형제 요소 중 p 태그의 글씨 가중도 변경 
*/

.list .target ~ li {
  font-weight: bold;
}

/* 
속성 선택자: 요소에 입력된 속성으로 요소를 선택
1) 요소[속성] : input 요소 중 required라는 속성을 가진 input 요소만 border 굵기 변경
input[required] {
  border-width :4px 
}

2) 요소[속성=값] : 요소의 특정 속성 값으로 요소를 선택
input 요소 중 type 값이 checkbox 인 요소만 margin 적용
input[type=checkbox] {
  margn :10px; 
}
 */

input[required] {
  border-width: 5px;
}

input [type="checkbox"] {
  width: 200px;
}

/* Html input 태그  -> html 9_form 복습 
<input> 태그의 required 속성은 폼 데이터가 서버로 제출되기 전 반드시 채워져 있어야 하는 입력 필드를 명시
속성값: checkbox,date,email,file...
*/


/* 
선택자 연습

1) item클래스 너비 100px, height 100px
2) item클래스를 가지면서 big 클래스를 가지면 200px 200p
3) item클래스의 자식 요소인 li 태그는 빨간색 글씨
4) item클래스의 인접 형제인 item 클래스 왼쪽 여백 10px
5) input 타입이 radio인 요소에만 안쪽 여백 10px
*/

.item {

  width: 100px;
  height: 100px;
}

.item .big {
  width: 200px 
  height: 200px;
}

.item > li {
  color: red;
}

.item + .item {
  margin-left: 10px;
}

input[type="radio"] {
  padding: 10px;
}



/* 
가상 클래스(Pseduo Class) 선택자
가상 클래스는 요소에 특정한 조건에 만족할 때에만 CSS를 적용을 할 때 사용하는 선택자이다.
선택자:가상클래스 의 형태로 작성

ex) 

1. p 태그 중 마우스가 올라간 p 태그만 배경색을 빨간색으로 지정
2. a 태그 중 클릭 중 (클릭 후 떼기 전)인 a 태그만 글씨를 파란색으로 적용.
3. li 태그 중 첫번째 자식요소인 li 태그만 글씨를 굵게 지정. 

1. p:hover {background-color : red:}  * hover --> 사용자가 포인팅 장치를 사용해 상호작용 중인 요소를 선택. 보통 사용자의 커서가 요소 위에 올라가 있으면 선택.
2. a { color : blue; }
3. li:first-child { font-weight : bold; }

*/

.list > li:hover {
  background-color: #ddd;
}
/* .list > li 위에 마우스를 올려 놓으면 배경색깔이 #ddd  */

.list > li:nth-child(1) {
  background-color: red;
}
/* .list > 첫번째 li 의 배경색만 빨강색  */

.list >li:active {
  background-color: #bbb;
}

/* 

앵커 가상 클래스 
1) :hover --> 마루스가 해당 요소 위에 있을 떄 요소의 스타일을 변경
2) :active --> 마우스가 해당 요소를 클릭하는 순간부터 떼는 순간까지 요소의 스타일을 변경
3) :focus --> 마우스로 해당 요소를 클릭하면 요소의 스타일 변경
4) :link --> 아직 방문하지 않는 링크 :visted --> 이미 방문한 링크
5) :first-child, :last-child, :nth-child() --> li 중에 n번째 요소에 해당 css 적용.

*/



/* 
가상 요소(Pseudo Element) 선택자 
HTML 문서내에 존재하지 않지만 가상의 요소를 추가하여 CSS를 적용하는 선택자이다.
디자인적으로 특정 상황에서만 요소를 추가해야 할 때 사용한다.
content 속성 지정 안하면 안생긴다 => 텍스트 없이 쓰려면 빈 문자열 "" 라도 지정해야 한다.

"::before" "::after" 2개만 새 컨텐츠를 추가하는 가상 요소.
html, 자바스크립트 없이도 html 페이지 안에 콘텐츠 혹은 또는 디자인 요소를 추가할 수 있는 특별한 기능.
선택자::가상요소 {}

contnent 속성 값에는 문자열, 이미지, html 속성, 변수, 함수, 등 css 로 표현할 수 있는 대부분의 콘텐츠를 사용
content:'ㄴ내용' 

::before 가상요소 -> 요소의 컨텐츠 -> ::after 가상요소 

ex)
1. ul 태그와 가장 첫번째 자식 요소 앞 (before) 에 가상의 요소를 추가한다.
2. ul 태그와 가장 마지막 자식 요소 뒤 (after) 에 가상의 요소를 추가한다.

1. ul::before { content: "가상요소(before)"; color: red; }
2. ul::after { content: "가상요소(after)"; color: blue;}
*/

.list > li:nth-child(1):hover::before {
content:"before";
display:block;
width:50px;
height:50px;
background-color: blue;
}

.list > li:nth-child(1):hover::after {
  content: "::after";
}